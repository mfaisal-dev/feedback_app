import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:share_plus/share_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:translator/translator.dart';

class ImageExtract extends StatefulWidget {
  const ImageExtract({super.key});

  @override
  State<ImageExtract> createState() => _ImageExtractState();
}

class _ImageExtractState extends State<ImageExtract> {
  File? image;
  String extractedText = "";
  bool isLoading = false;
  FlutterTts flutterTts = FlutterTts();
  String translatedText = "";

  Future<void> translateText(String text) async {
    final translator = GoogleTranslator();
    final translation =
        await translator.translate(text, to: 'ur'); // Translate to Urdu

    setState(() {
      translatedText = translation.text;
    });
  }

  void pickImage(ImageSource source) async {
    final file = await ImagePicker().pickImage(source: source);
    if (file != null) {
      setState(() {
        image = File(file.path);
        extractedText = "";
        translatedText = "";
      });
      extractText(image!);
    }
  }

  Future<void> extractText(File image) async {
    setState(() {
      isLoading = true;
    });
    try {
      final textRecognizer = TextRecognizer();
      final InputImage inputImage = InputImage.fromFile(image);
      final RecognizedText recognizedText =
          await textRecognizer.processImage(inputImage);
      setState(() {
        extractedText = recognizedText.text.isNotEmpty
            ? recognizedText.text
            : "No text found";
      });
      textRecognizer.close();
    } catch (e) {
      setState(() {
        extractedText = "Error: ${e.toString()}";
      });
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  void copyToClipboard() {
    if (extractedText.isNotEmpty) {
      Clipboard.setData(ClipboardData(text: extractedText));
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Text copied to clipboard!")),
      );
    }
  }

  Future<void> speakText(String text) async {
    await flutterTts.speak(text);
  }

  Future<void> _stopSpeaking() async {
    await flutterTts.stop();
  }

  Future<void> saveTextToFile(BuildContext context, String text) async {
    TextEditingController fileNameController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Enter File Name"),
          content: TextField(
            controller: fileNameController,
            decoration: const InputDecoration(
                hintText: "File Name (without extension)"),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () async {
                String fileName = fileNameController.text.trim();
                if (fileName.isEmpty) {
                  fileName = "ExtractedText";
                }
                final directory = await getApplicationDocumentsDirectory();
                final filePath = "${directory.path}/$fileName.txt";
                final file = File(filePath);
                await file.writeAsString(text);
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("Text saved as $fileName.txt")),
                );
                XFile xfile = XFile(filePath);
                Share.shareXFiles([xfile], text: "Extracted Text");
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Image to Text Extractor",
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
        centerTitle: true,
        automaticallyImplyLeading: false,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF4A90E2), Color(0xFF2A2A72)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
          ),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF4A90E2), Color(0xFF2A2A72)],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Container(
                width: double.infinity,
                height: 350,
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.white.withOpacity(0.5)),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: image != null
                    ? ClipRRect(
                        borderRadius: BorderRadius.circular(10),
                        child: Image.file(image!, fit: BoxFit.fill),
                      )
                    : const Center(
                        child: Text(
                          "Select image to extract text....",
                          style: TextStyle(color: Colors.white70, fontSize: 16),
                        ),
                      ),
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildActionButton(
                    icon: Icons.image,
                    label: "Gallery",
                    onPressed: () => pickImage(ImageSource.gallery),
                  ),
                  _buildActionButton(
                    icon: Icons.camera,
                    label: "Camera",
                    onPressed: () => pickImage(ImageSource.camera),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children: [
                      if (extractedText.isNotEmpty)
                        Container(
                          width: MediaQuery.of(context).size.width,
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Text(
                            extractedText,
                            style: const TextStyle(
                                fontSize: 18, color: Colors.white),
                          ),
                        ),
                      const SizedBox(height: 10),
                      if (extractedText.isNotEmpty &&
                          extractedText != "No text found")
                        Wrap(
                          alignment: WrapAlignment
                              .center, // Centers buttons horizontally
                          spacing: 10.0, // Horizontal spacing between buttons
                          runSpacing: 10.0, // Vertical spacing between rows
                          children: [
                            _buildActionButton(
                              icon: Icons.copy,
                              label: "Copy",
                              onPressed: copyToClipboard,
                            ),
                            _buildActionButton(
                              icon: Icons.volume_up,
                              label: "Read Aloud",
                              onPressed: () => speakText(extractedText),
                            ),
                            _buildActionButton(
                              icon: Icons.stop,
                              label: "Stop",
                              onPressed: _stopSpeaking,
                            ),
                            _buildActionButton(
                              icon: Icons.save,
                              label: "Save",
                              onPressed: () =>
                                  saveTextToFile(context, extractedText),
                            ),
                            _buildActionButton(
                              icon: Icons.translate,
                              label: "Urdu Translation",
                              onPressed: () => translateText(extractedText),
                            ),
                          ],
                        ),
                      const SizedBox(height: 10),
                      if (translatedText.isNotEmpty)
                        Container(
                          width: MediaQuery.of(context).size.width,
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Text(
                            translatedText,
                            style: const TextStyle(
                                fontSize: 18, color: Colors.white),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActionButton(
      {required IconData icon,
      required String label,
      required VoidCallback onPressed}) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, color: Colors.white),
      label: Text(label, style: const TextStyle(color: Colors.white)),
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.blue[900],
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30),
        ),
      ),
    );
  }
}
